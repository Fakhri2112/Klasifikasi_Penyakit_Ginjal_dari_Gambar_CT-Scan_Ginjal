# -*- coding: utf-8 -*-
"""Klasifikasi penyakit ginjal dari gambar CT Scan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BQtgrBtkqn0DTXzgoymA-1vcAGFG4sgG
"""

import numpy as np # linear algebra
 import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
 import os
 import cv2
 from pathlib import Path
 import seaborn as sns
 import matplotlib.pyplot as plt
 from skimage.io import imread

# Menentukan path dari direktori data
 data_dir =
 Path('../input/ct-kidney-dataset-normal-cyst-tumor-and-stone/CT-KIDNEY-DATASET-Norma
 l-Cyst-Tumor-Stone/')

# Path untuk train directory
 train_dir = data_dir / 'CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone'
 train_dir

# Dapatkan path ke sub-direktori normal dan berbagai penyakit ginjal
 normal_cases_dir = train_dir / 'Normal'
 Cyst_cases_dir = train_dir / 'Cyst'
 Stone_cases_dir = train_dir / 'Stone'
 18
Tumor_cases_dir = train_dir / 'Tumor'

# Dapatkan daftar semua gambar
 normal_cases = normal_cases_dir.glob('*.jpg')
 Cyst_cases = Cyst_cases_dir.glob('*.jpg')
 Stone_cases = Stone_cases_dir.glob('*.jpg')
 Tumor_cases = Tumor_cases_dir.glob('*.jpg')

# Daftar kosong. nanti Kita masukin data ke dalam daftar ini dengan format (img_path, label)
 train_data = []

# Telusuri semua kasus kista. Label untuk kasus ini adalah 0
 for img in Cyst_cases:
 train_data.append((img, 0))
# Telusuri semua kasus normal. Label untuk kasus ini adalah 1
 for img in normal_cases:
 train_data.append((img,1))
# Telusuri semua kasus batu ginjal. Label untuk kasus ini adalah 2
 for img in Stone_cases:
 train_data.append((img,2))
# Telusuri semua kasus tumor. Label untuk kasus ini adalah 3
 for img in Tumor_cases:
 train_data.append((img, 3))

# Dapatkan kerangka data pandas dari data yang kita miliki di daftar kita
 train_data = pd.DataFrame(train_data, columns=['image', 'label'],index=None)

# Acak datanya
 train_data = train_data.sample(frac=1.).reset_index(drop=True)

# bentuk kerangka datanya
 train_data.head()
 train_data['label'].unique()
 train_data.shape
 # Dapatkan count untuk setiap kelas
 cases_count = train_data['label'].value_counts()
 print(cases_count)

# Plot hasilnya
 plt.figure(figsize=(10,8))
 sns.barplot(x=cases_count.index, y= cases_count.values)
 plt.title('Number of cases', fontsize=14)
 plt.xlabel('Case type', fontsize=12)
 plt.ylabel('Count', fontsize=12)
 plt.xticks(range(len(cases_count.index)), ['Cyst(0)','Normal(1)', 'Stone(2)', 'Tumor(3)'])
 plt.show()

# Dapatkan beberapa sampel dari semua kelas
 Cyst_samples = (train_data[train_data['label']==0]['image'].iloc[:5]).tolist()
 Normal_samples = (train_data[train_data['label']==1]['image'].iloc[:5]).tolist()
 Stone_samples = (train_data[train_data['label']==2]['image'].iloc[:5]).tolist()
 Tumor_samples = (train_data[train_data['label']==3]['image'].iloc[:5]).tolist()

# Gabungkan data dalam satu daftar dan hapus dua daftar di atas
 samples = Cyst_samples + Normal_samples+Stone_samples+Tumor_samples
 del Cyst_samples, Normal_samples,Stone_samples,Tumor_samples

# Plot datanya
 f, ax = plt.subplots(4,5, figsize=(30,30))
  for i in range(20):
    img = imread(samples[i])
    ax[i//5, i%5].imshow(img, cmap='gray')
    if i<5:
      ax[i//5, i%5].set_title("Cyst_samples")
    elif i<10:
      ax[i//5, i%5].set_title("Normal_samples")
    elif i<15:
      ax[i//5, i%5].set_title("Stone_samples")
    elif i<20:
      ax[i//5, i%5].set_title("Tumor_samples")

    ax[i//5, i%5].axis('off')
    ax[i//5, i%5].set_aspect('auto')
 plt.show()

# Dapatkan jalur ke sub-direktori 4 kelas tersebut
 normal_cases_dir = train_dir / 'Normal'
 Cyst_cases_dir = train_dir / 'Cyst'
 Stone_cases_dir = train_dir / 'Stone'
 Tumor_cases_dir = train_dir / 'Tumor'
 20
# Dapatkan daftar semua gambar
 normal_cases = normal_cases_dir.glob('*.jpg')
 Cyst_cases = Cyst_cases_dir.glob('*.jpg')
 Stone_cases = Stone_cases_dir.glob('*.jpg')
 Tumor_cases = Tumor_cases_dir.glob('*.jpg')
 train_data = []
 train_labels = []

#from keras.utils.np_utils import to_categorical
 for img in Cyst_cases:
  img = cv2.imread(str(img))
  img = cv2.resize(img, (28,28))
  if img.shape[2] ==1:
    img = np.dstack([img, img, img])
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  img=np.array(img)
  img = img/255
  label = 'Cyst'
  train_data.append(img)
  train_labels.append(label)

 for img in normal_cases:
  img = cv2.imread(str(img))
  img = cv2.resize(img, (28,28))
  if img.shape[2] ==1:
    img = np.dstack([img, img, img])
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  img=np.array(img)
  img = img/255
  label ='Normal'
  train_data.append(img)
  train_labels.append(label)

 for img in Stone_cases:
  img = cv2.imread(str(img))
  img = cv2.resize(img, (28,28))
  if img.shape[2] ==1:
    img = np.dstack([img, img, img])
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  img=np.array(img)
  img = img/255
  label = 'Stone'
  train_data.append(img)
  train_labels.append(label)

 for img in Tumor_cases:
  img = cv2.imread(str(img))
  img = cv2.resize(img, (28,28))
  if img.shape[2] ==1:
    img = np.dstack([img, img, img])
  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
  img=np.array(img)
  img = img/255
  label = 'Tumor'
  train_data.append(img)
  train_labels.append(label)

# Ubah daftar menjadi array numpy
 train_data1 = np.array(train_data)
 train_labels1 = np.array(train_labels)
 print("Total number of validation examples: ", train_data1.shape)
 print("Total number of labels:", train_labels1.shape)
 train_data1.shape
 train_data1[1]
 train_labels1 = pd.DataFrame(train_labels1, columns=[ 'label'],index=None)
 train_labels1.head()
 train_labels1['label'].unique()
 train_labels1['label']=train_labels1['label'].map({'Cyst':0,'Normal':1, 'Stone':2,'Tumor':3})
 train_labels1
 print(train_data1.shape)
 print(train_labels1.shape)
 train_labels1.isnull().sum()
 from imblearn.over_sampling import SMOTE
 smt = SMOTE()
 train_rows=len(train_data1)
 train_data1 = train_data1.reshape(train_rows,-1)
 train_data2, train_labels2 = smt.fit_resample(train_data1, train_labels1)
cases_count1 = train_labels2['label'].value_counts()
 print(cases_count1

# Plot hasilnya
 plt.figure(figsize=(10,8))
 sns.barplot(x=cases_count1.index, y= cases_count1.values)
 plt.title('Number of cases', fontsize=14)
 plt.xlabel('Case type', fontsize=12)
 plt.ylabel('Count', fontsize=12)
 plt.xticks(range(len(cases_count.index)), ['Cyst(0)','Normal(1)', 'Stone(2)', 'Tumor(3)'])
 plt.show()
 train_data2.shape
 train_labels2.shape
 train_labels2['label'].value_counts()
 train_data2 =train_data2.reshape(-1,28,28,3)
 from sklearn.model_selection import train_test_split
 X_train, X_test, y_train, y_test = train_test_split(train_data2, train_labels2, test_size=0.23,
 random_state=42)
 import tensorflow as tf
 data_augmentation=tf.keras.preprocessing.image.ImageDataGenerator(
 rotation_range=30, horizontal_flip=True)
 import tensorflow as tf
 from tensorflow.keras import  layers, models
 model = models.Sequential([
 #data_augmentation,
 layers.Conv2D(28, (3, 3), activation='relu', input_shape=(28, 28, 3)) ,
 layers.MaxPooling2D((2, 2)),
 layers.Conv2D(64, (3, 3), activation='relu'),
 layers.MaxPooling2D((2, 2)),
 layers.Conv2D(64, (3, 3), activation='relu')
 ])
 model.summary()

model.add(layers.Flatten())
 model.add(layers.Dense(640, activation='tanh'))
 model.add(layers.Dropout(0.5))
 model.add(layers.Dense(264, activation='tanh'))
 model.add(layers.Dense(64, activation='sigmoid'))
 model.add(layers.Dense(4))
 model.summary()
 model.compile(optimizer='adam',
 loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
 metrics=['accuracy'])
 model.fit(np.array(X_train), np.array(y_train), epochs=20, validation_data=(np.array(X_test),
 np.array(y_test)))
 pic=[]
 img =
 cv2.imread(str('../input/ct-kidney-dataset-normal-cyst-tumor-and-stone/CT-KIDNEY-DATAS
 ET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Cyst/Cys
 t- (1004).jpg'))
 img = cv2.resize(img, (28,28))
 if img.shape[2] ==1:
 img = np.dstack([img, img, img])
 img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
 img=np.array(img)
 img = img/255
 #label = to_categorical(0, num_classes=2)
 pic.append(img)
 #pic_labels.append(pneu)
 pic1 = np.array(pic)
 a=model.predict(pic1)
 a
 a.argmax()